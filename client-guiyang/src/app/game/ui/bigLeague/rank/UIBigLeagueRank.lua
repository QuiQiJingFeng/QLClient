---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yangyang.
--- DateTime: 2019/7/10 14:37
---

local csbPath = "ui/csb/BigLeague/UIBigLeagueRank.csb"
local super = require("app.game.ui.UIBase")
local CheckBoxGroup = require("app.game.util.CheckBoxGroup")
local UIItemReusedListView = require("app.game.util.UIItemReusedListView")
local rankItems = require("app.game.ui.bigLeague.rank.UIRankItems")
local UIBigLeagueRank = class("UIBigLeagueRank", super, function() return kod.LoadCSBNode(csbPath) end)


--排行版类型
local type_Rank = {
    League_Type = 1,    --联盟中显示的排行
    Club_Type = 2,       --俱乐部中显示的排行
    Member_Type = 3,    --成员排行榜
}

local league_Ranks ={
    -- {1,"赛事概况", "Panel_LeagueStatus"},
    {1,"团队排名", "Panel_TeamRank"},
    {1,"活跃值排行", "Panel_FireRank"},
    {1,"参赛人数排行", "Panel_MemberRank"},
    {1,"比赛场次排行", "Panel_MatchRank"},
    {1,"抽奖次数排行", "Panel_LotteryRank"},    
    {2,"团队排行", "Panel_ClubRank"},
    {2,"团队概况", "Panel_ClubStatus"},
    {2,"成员场次排行", "Panel_MemberMatchRank"},    
    {2,"成员抽奖排行", "Panel_MemberLotteryRank"},    
}

--[[    
        联盟排行界面
]]
function UIBigLeagueRank:ctor()
    self._curDate = 0       --显示的哪天，0表示今天，1表示昨天，2前天...
    self._curIdx = 1        --当前显示的是哪个排行榜
end

function UIBigLeagueRank:init()
    --整理所有的panels，listview和item
    self._panels = {}
    self._listViews = {}
    for k,rank in ipairs(league_Ranks) do
        self._panels[k] = seekNodeByName(self, rank[3], "ccui.Layout")
        self._panels[k]:setPosition(cc.p(225.28,12.78))
        -- if k ~= 1 and k ~= 8 then
        if k~= 7 then
            self._listViews[k] = UIItemReusedListView.extend(seekNodeByName(self._panels[k], "ListView_Rank", "ccui.ListView"), rankItems[k])
        end
        self._panels[k]:setVisible(false)
    end
    --左侧的
    self._listButtons = seekNodeByName(self, "ListView_Buttons", "ccui.ListView")
    self._btnItem = seekNodeByName(self._listButtons, "Button_Item", "ccui.CheckBox")
    self._btnItem:retain()
    self._btnItem:removeFromParent()

    self._btnClose = seekNodeByName(self, "Button_Close", "ccui.Button")

    self._bigLeagueService = game.service.bigLeague.BigLeagueService:getInstance()

    self._btnToday = seekNodeByName(self, "CheckBox_Today", "ccui.CheckBox")
    self._btnYesterday = seekNodeByName(self, "CheckBox_Yesterday", "ccui.CheckBox")
    self._btnDate = seekNodeByName(self, "CheckBox_Date", "ccui.CheckBox")
    self._panelTime = seekNodeByName(self, "Panel_time", "ccui.Layout")
end

-- 点击事件注册
function UIBigLeagueRank:_registerCallBack()
    local tbChkBox = {self._btnDate, self._btnToday, self._btnYesterDay}
    local isSelected = false
    local pFunc = function(sender, eventType)
        if eventType == ccui.TouchEventType.began then
            isSelected = sender:isSelected()
        elseif eventType == ccui.TouchEventType.moved then
        elseif eventType == ccui.TouchEventType.ended then
            if sender:getName() == "CheckBox_Today" then 
                self:_onBtnToday()
            elseif sender:getName() == "CheckBox_Yesterday" then 
                self:_onBtnYesterday()
            elseif sender:getName() == "CheckBox_Date" then 
                self:_onBtnDate()
            end

            for _,btn in ipairs(tbChkBox) do 
                btn:setSelected(sender == btn)
            end
        elseif eventType == ccui.TouchEventType.canceled then
            sender:setSelected(isSelected)
        end
    end

    self._btnDate:addTouchEventListener(pFunc)
    self._btnToday:addTouchEventListener(pFunc)
    self._btnYesterDay:addTouchEventListener(pFunc)
    self._btnDate:setSelected(false)
    self._btnToday:setSelected(false)
    self._btnYesterday:setSelected(false)
    bindEventCallBack(self._btnClose,        handler(self, self._onBtnClose),        ccui.TouchEventType.ended)
end

function UIBigLeagueRank:onShow()
    -- self._bigLeagueService:getLeagueData():createTestData()
    self._alreadyUpdate = {0,0,0,0,0,0,0,0,0,0}
   
    self._curDate = 0
    

    local nType = 0
    if self._bigLeagueService:getIsSuperLeague() then
        nType = 1
    elseif self._bigLeagueService:getLeagueData():isManager() then
        nType = 2
    else
        nType = 3
    end
    self._type = nType
    self:_sendQueryRequest()    

    self:updateButtons()
    self:_registerCallBack()
    self._bigLeagueService:addEventListener("EVENT_LEAGUE_RANK", handler(self, self._updateRank), self)
    self._bigLeagueService:addEventListener("EVENT_LIKE_CHANGE", handler(self, self._likeChange), self)
end

function UIBigLeagueRank:_updateRank()   

    self:_onCheckBoxGroupClick(self._btn_group, self._curIdx)
end

--填充左侧的按钮
function UIBigLeagueRank:updateButtons()
    self._listButtons:removeAllChildren()
    self._btns = {}
    if self._type == 3 then
        local btn = self._btnItem:clone()
        btn:setTag(7)
        local text = btn:getChildByName("Text_Name")
        text:setString("俱乐部概况")
        self._listButtons:pushBackCustomItem(btn)
        table.insert(self._btns, btn)
    else
        for k, rank in ipairs(league_Ranks) do
            if rank[1] == self._type then
                local btn = self._btnItem:clone()
                btn:setTag(k)
                local text = btn:getChildByName("Text_Name")
                text:setString(rank[2])
                self._listButtons:pushBackCustomItem(btn)
                table.insert(self._btns, btn)
            end
        end
       
    end
    self._btn_group = CheckBoxGroup.new(self._btns, handler(self, self._onCheckBoxGroupClick))
    self._curIdx = 1
end

function UIBigLeagueRank:_onCheckBoxGroupClick(group, index)
    local tag = self._btns[index]:getTag()
    self._curIdx = index
    for i = 1,#league_Ranks do
        if i ~= tag then
            self._panels[i]:setVisible(false)
        end
    end
    -- self._panels[tag]:setVisible(true)   
    -- if tag == 1 then
    --     self:_updateLeagueStatus()
    -- elseif tag== 2 then
    --     self:_updateTeamRank()
    -- elseif tag == 3 then
    --     self:_updateFireRank()
    -- elseif tag == 4 then
    --     self:_updateMemberRank()
    -- elseif tag == 5 then
    --     self:_updateMatchRank()
    -- elseif tag == 6 then
    --     self:_updateLotteryRank()
    -- elseif tag == 7 then
    --     self:_updateClubRank()
    -- elseif tag == 8 then
    --     self:_updateClubStatus()
    -- elseif tag == 9 then
    --     self:_updateMemberMatchRank()
    -- elseif tag == 10 then
    --     self:_updateMemberLotteryRank()
    -- end

    if tag== 1 then
        self:_updateTeamRank()
    elseif tag == 2 then
        self:_updateFireRank()
    elseif tag == 3 then
        self:_updateMemberRank()
    elseif tag == 4 then
        self:_updateMatchRank()
    elseif tag == 5 then
        self:_updateLotteryRank()
    elseif tag == 6 then
        self:_updateClubRank()
    elseif tag == 7 then
        self:_updateClubStatus()
    elseif tag == 8 then
        self:_updateMemberMatchRank()
    elseif tag == 9 then
        self:_updateMemberLotteryRank()
    end

end

function UIBigLeagueRank:_likeChange(event)
    UIManager:getInstance():hide("UIBigLeagueLikeTip")
    local clubId = event.clubId
    local item = self._listViews[1]:getChildByTag(clubId)   
    self._listViews[1]:updateItem(item._itemId, self._bigLeagueService:getLeagueData():getRankInfoByClubId(clubId, self._curDate))
   
end
--刷新联盟概况
function UIBigLeagueRank:_updateLeagueStatus()
    local beginScore, totalScore, lotteryScore, activeScore = self._bigLeagueService:getLeagueData():getLeagueRankScores(self._curDate)
    self._panels[1]:setVisible(true)
    --初始分
    seekNodeByName(self._panels[1], "Text_BeginScore", "ccui.Text"):setString("".. math.round(beginScore * 100) / 100)
    seekNodeByName(self._panels[1], "Text_TotalScore", "ccui.Text"):setString("".. math.round(totalScore * 100) / 100)
    seekNodeByName(self._panels[1], "Text_LotteryScore", "ccui.Text"):setString("".. math.round(lotteryScore * 100) / 100)
    seekNodeByName(self._panels[1], "Text_ActiveScore", "ccui.Text"):setString("".. math.round(activeScore * 100) / 100)
end
--刷新团队列表
function UIBigLeagueRank:_updateTeamRank()
    local data = self._bigLeagueService:getLeagueData():getRankInfo(self._curDate)
    if data == nil or #data == 0  then
        self._panels[1]:setVisible(false)
        return
    end
    table.sort(data, function(a,b)
        return a.winScore > b.winScore
    end)
    self._panels[1]:setVisible(true)
    self:_updateLists(data, 1)
end
--刷新火力版
function UIBigLeagueRank:_updateFireRank()
    local data = self._bigLeagueService:getLeagueData():getRankInfo(self._curDate)
    if data == nil or #data == 0  then
        self._panels[2]:setVisible(false)
        return
    end
    table.sort(data, function(a,b)
        return a.fireScore > b.fireScore
    end)
    self._panels[2]:setVisible(true)
    self:_updateLists(data, 2)
end
--刷新参赛人数版
function UIBigLeagueRank:_updateMemberRank()
    local data = self._bigLeagueService:getLeagueData():getRankInfo(self._curDate)
    if data == nil or #data == 0  then
        self._panels[3]:setVisible(false)
        return
    end
    table.sort(data, function(a,b)
        return a.memberCount > b.memberCount
    end)
    self._panels[3]:setVisible(true)
    self:_updateLists(data, 3)
end
--刷新比赛场次版
function UIBigLeagueRank:_updateMatchRank()
    local data = self._bigLeagueService:getLeagueData():getRankInfo(self._curDate)
    if data == nil or #data == 0  then
        self._panels[4]:setVisible(false)
        return
    end
    table.sort(data, function(a,b)
        return a.roomCount > b.roomCount
    end)
    self._panels[4]:setVisible(true)
    self:_updateLists(data, 4)
end
--刷新抽奖次数版
function UIBigLeagueRank:_updateLotteryRank()
    local data = self._bigLeagueService:getLeagueData():getRankInfo(self._curDate)
    if data == nil or #data == 0  then
        self._panels[5]:setVisible(false)
        return
    end
    table.sort(data, function(a,b)
        return a.lotteryCount > b.lotteryCount
    end)
    self._panels[5]:setVisible(true)
    self:_updateLists(data, 5)
end
--俱乐部排行
function UIBigLeagueRank:_updateClubRank()
    local data = self._bigLeagueService:getLeagueData():getRankInfo(self._curDate)
    if data == nil or #data == 0 then
        self._panels[6]:setVisible(false)
        return
    end
    table.sort(data, function(a,b)
        return a.winScore > b.winScore
    end)
    self._panels[6]:setVisible(true)
    self:_updateLists(data, 6)
end
--俱乐部概况
function UIBigLeagueRank:_updateClubStatus()
    local clubId = self._bigLeagueService:getLeagueData():getClubId()
    local info = self._bigLeagueService:getLeagueData():getRankInfoByClubId(clubId, self._curDate)
    if info == nil then
        self._panels[7]:setVisible(false)
        return
    end
    --初始分
    seekNodeByName(self._panels[7], "Text_InitScore", "ccui.Text"):setString("".. math.round(info.allScore * 100) / 100)
    seekNodeByName(self._panels[7], "Text_FirePercent", "ccui.Text"):setString("".. math.round(info.fireScoreRate * 100) / 100 .."%")
    --优胜分排行
    self._panels[7]:setVisible(true)
    seekNodeByName(self._panels[7], "Text_WinScore", "ccui.Text"):setString("".. math.round(info.winScore * 100) / 100)
    seekNodeByName(self._panels[7], "Text_WinRank", "ccui.Text"):setString("".. self._bigLeagueService:getLeagueData():getClubRank(clubId, self._curDate, "winScore"))
     --优胜分排行
    seekNodeByName(self._panels[7], "Text_FireScore", "ccui.Text"):setString("".. math.round(info.fireScore * 100) / 100)
    seekNodeByName(self._panels[7], "Text_FireRank", "ccui.Text"):setString("".. self._bigLeagueService:getLeagueData():getClubRank(clubId, self._curDate, "fireScore"))
      --优胜分排行
    seekNodeByName(self._panels[7], "Text_MemberCount", "ccui.Text"):setString("".. info.memberCount)
    seekNodeByName(self._panels[7], "Text_MemberRank", "ccui.Text"):setString("".. self._bigLeagueService:getLeagueData():getClubRank(clubId, self._curDate, "memberCount"))
     --优胜分排行
    seekNodeByName(self._panels[7], "Text_MatchCount", "ccui.Text"):setString("".. info.roomCount)
    seekNodeByName(self._panels[7], "Text_MatchRank", "ccui.Text"):setString("".. self._bigLeagueService:getLeagueData():getClubRank(clubId, self._curDate, "roomCount"))
      --优胜分排行
    seekNodeByName(self._panels[7], "Text_LotteryCount", "ccui.Text"):setString("".. info.lotteryCount)
    seekNodeByName(self._panels[7], "Text_LotteryRank", "ccui.Text"):setString("".. self._bigLeagueService:getLeagueData():getClubRank(clubId, self._curDate, "lotteryCount"))
end
--成员场次排行
function UIBigLeagueRank:_updateMemberMatchRank()
    local data = self._bigLeagueService:getLeagueData():getMemberRank(self._curDate)
    if data == nil or #data == 0 then
        self._panels[8]:setVisible(false)
        return
    end
    table.sort(data, function(a,b)
        return a.roomCount > b.roomCount
    end)
    self._panels[8]:setVisible(true)
    self:_updateLists(data, 8)
end
--成员抽奖排行
function UIBigLeagueRank:_updateMemberLotteryRank()
    local data = self._bigLeagueService:getLeagueData():getMemberRank(self._curDate)
    if data == nil or #data == 0  then
        self._panels[9]:setVisible(false)
        return
    end
    table.sort(data, function(a,b)
        return a.lotteryCount > b.lotteryCount
    end)
    self._panels[9]:setVisible(true)
    self:_updateLists(data, 9)
end

--刷新listview
function UIBigLeagueRank:_updateLists(data, index)
    -- if self._alreadyUpdate[index] == 1 then
    --     return
    -- end
    self._alreadyUpdate[index] = 1


    self._listViews[index]:deleteAllItems()
    for idx,info in ipairs(data) do
        info.idx = idx        
        info._day = self._curDate
        self._listViews[index]:pushBackItem(info)
    end
end
function UIBigLeagueRank:onHide()
    self._bigLeagueService:removeEventListenersByTag(self)
    self._bigLeagueService:getLeagueData():clearRankData()
end


function UIBigLeagueRank:_onBtnClose()
    UIManager:getInstance():hide("UIBigLeagueRank")
end

function UIBigLeagueRank:_onBtnToday()
    self:_setTime(0)
end


function UIBigLeagueRank:_onBtnYesterday()
    self:_setTime(1)
end

function UIBigLeagueRank:_onBtnDate()
    UIManager:getInstance():show("UIBigLeagueDateSet", game.service.TimeService.getInstance():getStartTime(self._curDate), self)
end

function UIBigLeagueRank:_setTime(date)
    if self._curDate == date then
        return
    end
    self._alreadyUpdate = {0,0,0,0,0,0,0,0,0,0}
    self._curDate = date
    if #self._bigLeagueService:getLeagueData():getRankInfo(self._curDate) > 0 then
        self:_onCheckBoxGroupClick(self._btn_group, self._curIdx)
    else
        self:_sendQueryRequest()
    end
end

function UIBigLeagueRank:_sendQueryRequest()
    self._bigLeagueService:sendCCLQueryLeagueRankREQ(self._bigLeagueService:getLeagueData():getLeagueId(),self._bigLeagueService:getLeagueData():getClubId(),self._type, game.service.TimeService:getInstance():getStartTime(self._curDate)* 1000)
    
end

return UIBigLeagueRank